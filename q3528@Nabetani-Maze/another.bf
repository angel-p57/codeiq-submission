* detect the opened gate and switch
,[>[->>]<[>+++>]<<-]+>[-[-[-
 * gate "a" is open
 <->
 * sliding loop ( 2 times )
 >>,<++[-
  * parse one char and convert to a path expression of the node
  >>++++++[-<-------->]+<[-[-[-[-[-[-[-[-[-[--------[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-
    > ->> *Z:1003003011* +>>>>>>>>>+++>>>>>>>>>+++>>>>>>+>>>+>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<
  <]>[->> *Y:10030030112* +>>>>>>>>>+++>>>>>>>>>+++>>>>>>+>>>+>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *X:100300301122* +>>>>>>>>>+++>>>>>>>>>+++>>>>>>+>>>+>>>++>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *W:100* +>>>>>>>>>-<<<<<<<<< <<]
  <]>[->> *V:10* +>>>>>>-<<<<<< <<]
  <]>[->> *U:1* +>>>-<<< <<]
  <]>[->> *T:100300301* +>>>>>>>>>+++>>>>>>>>>+++>>>>>>+>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *S:100300* +>>>>>>>>>+++>>>>>>>>>-<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *R:10030* +>>>>>>>>>+++>>>>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *Q:1003* +>>>>>>>>>+++>>>-<<<<<<<<<<<< <<]
  <]>[->> *P:301* +++>>>>>>+>>>-<<<<<<<<< <<]
  <]>[->> *O:* - <<]
  <]>[->> *N:10030030* +>>>>>>>>>+++>>>>>>>>>+++>>>>>>-<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *M:1003003* +>>>>>>>>>+++>>>>>>>>>+++>>>-<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *L:3000* +++>>>>>>>>>>>>-<<<<<<<<<<<< <<]
  <]>[->> *K:300* +++>>>>>>>>>-<<<<<<<<< <<]
  <]>[->> *J:30* +++>>>>>>-<<<<<< <<]
  <]>[->> *I:3* +++>>>-<<< <<]
  <]>[->> *H:100300303* +>>>>>>>>>+++>>>>>>>>>+++>>>>>>+++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *G:3033030011* +++>>>>>>+++>>>+++>>>>>>+++>>>>>>>>>+>>>+>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *F:30330300121* +++>>>>>>+++>>>+++>>>>>>+++>>>>>>>>>+>>>++>>>+>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *E:3003* +++>>>>>>>>>+++>>>-<<<<<<<<<<<< <<]
  <]>[->> *D:303* +++>>>>>>+++>>>-<<<<<<<<< <<]
  <]>[->> *C:3032* +++>>>>>>+++>>>++>>>-<<<<<<<<<<<< <<]
  <]>[->> *B:1003003033* +>>>>>>>>>+++>>>>>>>>>+++>>>>>>+++>>>+++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *A:303303001* +++>>>>>>+++>>>+++>>>>>>+++>>>>>>>>>+>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *9:3033030012* +++>>>>>>+++>>>+++>>>>>>+++>>>>>>>>>+>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *8:30330* +++>>>>>>+++>>>+++>>>>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *7:3033* +++>>>>>>+++>>>+++>>>-<<<<<<<<<<<< <<]
  <]>[->> *6:30332* +++>>>>>>+++>>>+++>>>++>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *5:303303000* +++>>>>>>+++>>>+++>>>>>>+++>>>>>>>>>>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *4:30330300* +++>>>>>>+++>>>+++>>>>>>+++>>>>>>>>>-<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *3:3033030* +++>>>>>>+++>>>+++>>>>>>+++>>>>>>-<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *2:303303* +++>>>>>>+++>>>+++>>>>>>+++>>>-<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *1:3033032* +++>>>>>>+++>>>+++>>>>>>+++>>>++>>>-<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *0:303323* +++>>>>>>+++>>>+++>>>++>>>+++>>>-<<<<<<<<<<<<<<<<<< <<]
 <<[->+<]>>,<]<<
]<[->
 * gate "b" is open
 * sliding loop ( 2 times )
 >>,<++[-
  * parse one char and convert to a path expression of the node
  >>++++++[-<-------->]+<[-[-[-[-[-[-[-[-[-[--------[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-
    > ->> *Z:11003003011* +>>>+>>>>>>>>>+++>>>>>>>>>+++>>>>>>+>>>+>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<
  <]>[->> *Y:110030030112* +>>>+>>>>>>>>>+++>>>>>>>>>+++>>>>>>+>>>+>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *X:1100300301122* +>>>+>>>>>>>>>+++>>>>>>>>>+++>>>>>>+>>>+>>>++>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *W:1100* +>>>+>>>>>>>>>-<<<<<<<<<<<< <<]
  <]>[->> *V:110* +>>>+>>>>>>-<<<<<<<<< <<]
  <]>[->> *U:11* +>>>+>>>-<<<<<< <<]
  <]>[->> *T:1100300301* +>>>+>>>>>>>>>+++>>>>>>>>>+++>>>>>>+>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *S:1100300* +>>>+>>>>>>>>>+++>>>>>>>>>-<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *R:110030* +>>>+>>>>>>>>>+++>>>>>>-<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *Q:11003* +>>>+>>>>>>>>>+++>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *P:01* >>>+>>>-<<<<<< <<]
  <]>[->> *O:1* +>>>-<<< <<]
  <]>[->> *N:110030030* +>>>+>>>>>>>>>+++>>>>>>>>>+++>>>>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *M:11003003* +>>>+>>>>>>>>>+++>>>>>>>>>+++>>>-<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *L:000* >>>>>>>>>-<<<<<<<<< <<]
  <]>[->> *K:00* >>>>>>-<<<<<< <<]
  <]>[->> *J:0* >>>-<<< <<]
  <]>[->> *I:* - <<]
  <]>[->> *H:1100300303* +>>>+>>>>>>>>>+++>>>>>>>>>+++>>>>>>+++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *G:0030301* >>>>>>+++>>>>>>+++>>>>>>+>>>-<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *F:0030* >>>>>>+++>>>>>>-<<<<<<<<<<<< <<]
  <]>[->> *E:003* >>>>>>+++>>>-<<<<<<<<< <<]
  <]>[->> *D:03* >>>+++>>>-<<<<<< <<]
  <]>[->> *C:032* >>>+++>>>++>>>-<<<<<<<<< <<]
  <]>[->> *B:11003003033* +>>>+>>>>>>>>>+++>>>>>>>>>+++>>>>>>+++>>>+++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *A:003030* >>>>>>+++>>>>>>+++>>>>>>-<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *9:00303* >>>>>>+++>>>>>>+++>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *8:0030303221* >>>>>>+++>>>>>>+++>>>>>>+++>>>++>>>++>>>+>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *7:00303032212* >>>>>>+++>>>>>>+++>>>>>>+++>>>++>>>++>>>+>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *6:003030322122* >>>>>>+++>>>>>>+++>>>>>>+++>>>++>>>++>>>+>>>++>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *5:00303030* >>>>>>+++>>>>>>+++>>>>>>+++>>>>>>-<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *4:0030303* >>>>>>+++>>>>>>+++>>>>>>+++>>>-<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *3:00303032* >>>>>>+++>>>>>>+++>>>>>>+++>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *2:003030322* >>>>>>+++>>>>>>+++>>>>>>+++>>>++>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *1:0030303222* >>>>>>+++>>>>>>+++>>>>>>+++>>>++>>>++>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *0:0030303221223* >>>>>>+++>>>>>>+++>>>>>>+++>>>++>>>++>>>+>>>++>>>++>>>+++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
 <<[->+<]>>,<]<<
<]>]<[->
 * gate "c" is open
 * sliding loop ( 2 times )
 >>,<++[-
  * parse one char and convert to a path expression of the node
  >>++++++[-<-------->]+<[-[-[-[-[-[-[-[-[-[--------[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-
    > ->> *Z:3011* +++>>>>>>+>>>+>>>-<<<<<<<<<<<< <<
  <]>[->> *Y:30112* +++>>>>>>+>>>+>>>++>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *X:301122* +++>>>>>>+>>>+>>>++>>>++>>>-<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *W:221* ++>>>++>>>+>>>-<<<<<<<<< <<]
  <]>[->> *V:2212* ++>>>++>>>+>>>++>>>-<<<<<<<<<<<< <<]
  <]>[->> *U:22122* ++>>>++>>>+>>>++>>>++>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *T:301* +++>>>>>>+>>>-<<<<<<<<< <<]
  <]>[->> *S:* - <<]
  <]>[->> *R:2* ++>>>-<<< <<]
  <]>[->> *Q:22* ++>>>++>>>-<<<<<< <<]
  <]>[->> *P:221223301* ++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>>>>+>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *O:221223* ++>>>++>>>+>>>++>>>++>>>+++>>>-<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *N:30* +++>>>>>>-<<<<<< <<]
  <]>[->> *M:3* +++>>>-<<< <<]
  <]>[->> *L:2212233000* ++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>>>>>>>>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *K:221223300* ++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>>>>>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *J:22122330* ++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>>>>-<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *I:2212233* ++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>-<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *H:303* +++>>>>>>+++>>>-<<<<<<<<< <<]
  <]>[->> *G:33* +++>>>+++>>>-<<<<<< <<]
  <]>[->> *F:33321* +++>>>+++>>>+++>>>++>>>+>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *E:2212233003* ++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>>>>>>>+++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *D:221223303* ++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>>>>+++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *C:2212233032* ++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>>>>+++>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *B:3033* +++>>>>>>+++>>>+++>>>-<<<<<<<<<<<< <<]
  <]>[->> *A:333* +++>>>+++>>>+++>>>-<<<<<<<<< <<]
  <]>[->> *9:3332* +++>>>+++>>>+++>>>++>>>-<<<<<<<<<<<< <<]
  <]>[->> *8:3333221* +++>>>+++>>>+++>>>+++>>>++>>>++>>>+>>>-<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *7:33332212* +++>>>+++>>>+++>>>+++>>>++>>>++>>>+>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *6:333322122* +++>>>+++>>>+++>>>+++>>>++>>>++>>>+>>>++>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *5:33330* +++>>>+++>>>+++>>>+++>>>>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *4:3333* +++>>>+++>>>+++>>>+++>>>-<<<<<<<<<<<< <<]
  <]>[->> *3:33332* +++>>>+++>>>+++>>>+++>>>++>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *2:333322* +++>>>+++>>>+++>>>+++>>>++>>>++>>>-<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *1:3333222* +++>>>+++>>>+++>>>+++>>>++>>>++>>>++>>>-<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *0:3333221223* +++>>>+++>>>+++>>>+++>>>++>>>++>>>+>>>++>>>++>>>+++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
 <<[->+<]>>,<]<<
<]>]<[->
 * gate "d" is open
 * sliding loop ( 2 times )
 >>,<++[-
  * parse one char and convert to a path expression of the node
  >>++++++[-<-------->]+<[-[-[-[-[-[-[-[-[-[--------[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-[-
    > ->> *Z:011* >>>+>>>+>>>-<<<<<<<<< <<
  <]>[->> *Y:0112* >>>+>>>+>>>++>>>-<<<<<<<<<<<< <<]
  <]>[->> *X:01122* >>>+>>>+>>>++>>>++>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *W:1221* +>>>++>>>++>>>+>>>-<<<<<<<<<<<< <<]
  <]>[->> *V:12212* +>>>++>>>++>>>+>>>++>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *U:122122* +>>>++>>>++>>>+>>>++>>>++>>>-<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *T:01* >>>+>>>-<<<<<< <<]
  <]>[->> *S:1* +>>>-<<< <<]
  <]>[->> *R:12* +>>>++>>>-<<<<<< <<]
  <]>[->> *Q:122* +>>>++>>>++>>>-<<<<<<<<< <<]
  <]>[->> *P:1221223301* +>>>++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>>>>+>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *O:1221223* +>>>++>>>++>>>+>>>++>>>++>>>+++>>>-<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *N:0* >>>-<<< <<]
  <]>[->> *M:* - <<]
  <]>[->> *L:12212233000* +>>>++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>>>>>>>>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *K:1221223300* +>>>++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>>>>>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *J:122122330* +>>>++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *I:12212233* +>>>++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>-<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *H:03* >>>+++>>>-<<<<<< <<]
  <]>[->> *G:03321* >>>+++>>>+++>>>++>>>+>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *F:033221* >>>+++>>>+++>>>++>>>++>>>+>>>-<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *E:12212233003* +>>>++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>>>>>>>+++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *D:1221223303* +>>>++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>>>>+++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *C:12212233032* +>>>++>>>++>>>+>>>++>>>++>>>+++>>>+++>>>>>>+++>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *B:033* >>>+++>>>+++>>>-<<<<<<<<< <<]
  <]>[->> *A:0332* >>>+++>>>+++>>>++>>>-<<<<<<<<<<<< <<]
  <]>[->> *9:03322* >>>+++>>>+++>>>++>>>++>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *8:03323221* >>>+++>>>+++>>>++>>>+++>>>++>>>++>>>+>>>-<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *7:033232212* >>>+++>>>+++>>>++>>>+++>>>++>>>++>>>+>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *6:0332322122* >>>+++>>>+++>>>++>>>+++>>>++>>>++>>>+>>>++>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *5:033230* >>>+++>>>+++>>>++>>>+++>>>>>>-<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *4:03323* >>>+++>>>+++>>>++>>>+++>>>-<<<<<<<<<<<<<<< <<]
  <]>[->> *3:033232* >>>+++>>>+++>>>++>>>+++>>>++>>>-<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *2:0332322* >>>+++>>>+++>>>++>>>+++>>>++>>>++>>>-<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *1:03323222* >>>+++>>>+++>>>++>>>+++>>>++>>>++>>>++>>>-<<<<<<<<<<<<<<<<<<<<<<<< <<]
  <]>[->> *0:03323221223* >>>+++>>>+++>>>++>>>+++>>>++>>>++>>>+>>>++>>>++>>>+++>>>-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< <<]
 <<[->+<]>>,<]<<
<]
* clear a newline or eof
>>>>+[-]
* loop for searching a forked point or an end of the paths
+[
 >+>+[
  * not the end in the path of the goal node
  <[
   * not the end in the path of the start node
   [->-<]
   >[
    * detect a forked point ( stop this loop )
    ++++<+<-
   ]
   <<[-
    * not a forked point ( slide and continue this loop )
    >>>+<<
   ]
  ]
  >[<<-<]
 ]
 <<[-<<<]
>>>]
* count the distance between the forked point and the end of the path of the goal node
>->[>>>+]<<<[[-]>[-<<<+>>>]<<<+<]
* count and add the distance between the forked point and the end of the path of start node
>>+[[-]<[->>>+<<<]>>>+>+]
* print as decimal
<+[>[+>>>]<[>--------->+>]<<<-]
->+++++++++>-[>]
<+[-
 >++++++[-<++++++++>]
 <.[-]
<+]
* print a newline
++++++++++.
