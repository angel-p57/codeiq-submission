x→Fn(x) を有向グラフの遷移と見做し、ループ検出と枝の除去を考える。

例えば n=8 の場合、
 0→0, 1→3, 2→6, 3→7, 4→8, 5→7, 6→6, 7→3, 8→0
の9本のパスがある。
この中でループになっているのは
 0→0 ( 長さ1 )、3→7→3 ( 長さ2 )、6→6 ( 長さ1 )
の3経路であり、他は枝となっている。

そこで、枝の起点となる「他から遷移されないノード」をグラフから除去していくことで、
ループのみを残すようにする。
除去することで、改めて他から遷移されなくなるノードも出てくるため、
それらも順々に除去していき、最終的に除去されなくなれば、ループのみが残った状態となる。

この n=8 の場合、
・まず 1,2,4,5 の除去 ( 3→7→3, 8→0→0, 6→6 のみ残る )
・最後に 8 の除去 ( 0→0, 3→7→3, 6→6 のみ残る )
の2ステップでループのみが残る。
除去対象に関しては、各数に対して遷移元となる数の個数を記録しておく
( 除去が発生する毎に個数を減少させる ) ことで判断する

さて、最終的に必要な G の値の合計については、各数に「重み」を設定し、
ノードを除去する度に「委譲」することで計算する。
例えば n=8 の場合、3 は 3→7→3 のループのため G=2、1 は 1→3 と
遷移するため G=3、この2数分の合計は 5 である。
これを、1 を除去する段階で、その重み 1 をまず合計値に加算した上で、
遷移先の 3 に重みを委譲し 2 というように考える。
3 は重み2、ループ長 2 なので 2×2=4、G の合計は先ほどの 1 と加算し 1+4 で、
辻褄は合っている。
0(G=1),4(G=3),8(G=2) の3数の場合であれば、
・4 を除去、4の重み 1 加算、8 に重みを委譲して 2
・8 を除去、8の重み 2 加算、0 に重みを委譲して 3
・0 は重み3、長さ1のループ、3×1 を加算、合計 6
といった具合になる
